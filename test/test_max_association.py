import unittest
import problem1.maximum_association as ms
import problem1.weighted_graph as wg

class TestBM(unittest.TestCase):
    def test_1(self):
        edges = [   wg.Edge("A", "F", 1, 0),
                    wg.Edge("B", "F", 1, 0),
                    wg.Edge("B", "H", 1, 0),
                    wg.Edge("C", "G", 1, 0),
                    wg.Edge("C", "H", 1, 0),
                    wg.Edge("C", "I", 1, 0),
                    wg.Edge("D", "H", 1, 0),
                    wg.Edge("E", "H", 1, 0) ]
        graph = wg.Graph(edges)
        Family=ms.Max_association(graph)
        self.assertAlmostEqual(3, Family.number_of_pairs)
    def test_2(self):
        edges = [   wg.Edge("A", "D", 1, 0),
                    wg.Edge("A", "E", 1, 0),
                    wg.Edge("A", "F", 1, 0),
                    wg.Edge("B", "D", 1, 0),
                    wg.Edge("B", "E", 1, 0),
                    wg.Edge("B", "F", 1, 0),
                    wg.Edge("C", "D", 1, 0),
                    wg.Edge("C", "E", 1, 0),
                    wg.Edge("C", "F", 1, 0) ]
        graph = wg.Graph(edges)
        Family=ms.Max_association(graph)
        self.assertAlmostEqual(3, Family.number_of_pairs)
    def test_3(self):
        edges = [   wg.Edge("C", "7", 1, 0),
                    wg.Edge("H", "6", 1, 0),
                    wg.Edge("E", "3", 1, 0),
                    wg.Edge("I", "8", 1, 0),
                    wg.Edge("H", "1", 1, 0),
                    wg.Edge("A", "6", 1, 0),
                    wg.Edge("B", "10", 1, 0),
                    wg.Edge("E", "4", 1, 0),
                    wg.Edge("J", "2", 1, 0),
                    wg.Edge("G", "8", 1, 0),
                    wg.Edge("B", "5", 1, 0),
                    wg.Edge("I", "1", 1, 0),
                    wg.Edge("F", "7", 1, 0),
                    wg.Edge("H", "3", 1, 0),
                    wg.Edge("A", "5", 1, 0),
                    wg.Edge("B", "9", 1, 0),
                    wg.Edge("C", "6", 1, 0),
                    wg.Edge("H", "9", 1, 0),
                    wg.Edge("F", "10", 1, 0),
                    wg.Edge("B", "1", 1, 0),
                    wg.Edge("I", "4", 1, 0),
                    wg.Edge("C", "2", 1, 0),
                    wg.Edge("J", "5", 1, 0),
                    wg.Edge("C", "8", 1, 0),
                    wg.Edge("A", "7", 1, 0),
                    wg.Edge("D", "10", 1, 0),
                    wg.Edge("F", "9", 1, 0),
                    wg.Edge("J", "6", 1, 0),
                    wg.Edge("G", "4", 1, 0),
                    wg.Edge("A", "8", 1, 0),
                    wg.Edge("J", "10", 1, 0),
                    wg.Edge("B", "3", 1, 0),
                    wg.Edge("I", "3", 1, 0),
                    wg.Edge("E", "2", 1, 0),
                    wg.Edge("E", "5", 1, 0),
                    wg.Edge("D", "8", 1, 0),
                    wg.Edge("G", "7", 1, 0),
                    wg.Edge("G", "10", 1, 0),
                    wg.Edge("D", "7", 1, 0) ]
        graph = wg.Graph(edges)
        Family=ms.Max_association(graph)
        self.assertAlmostEqual(10, Family.number_of_pairs)

    def test_4(self):
        edges = [wg.Edge("G", "22", 1, 0),
                wg.Edge("V", "5", 1, 0),
                wg.Edge("T", "17", 1, 0),
                wg.Edge("M", "1", 1, 0),
                wg.Edge("J", "18", 1, 0),
                wg.Edge("R", "4", 1, 0),
                wg.Edge("S", "10", 1, 0),
                wg.Edge("R", "15", 1, 0),
                wg.Edge("Z", "3", 1, 0),
                wg.Edge("B", "23", 1, 0),
                wg.Edge("K", "5", 1, 0),
                wg.Edge("W", "19", 1, 0),
                wg.Edge("Y", "14", 1, 0),
                wg.Edge("E", "7", 1, 0),
                wg.Edge("O", "16", 1, 0),
                wg.Edge("D", "4", 1, 0),
                wg.Edge("O", "24", 1, 0),
                wg.Edge("U", "6", 1, 0),
                wg.Edge("N", "13", 1, 0),
                wg.Edge("J", "9", 1, 0),
                wg.Edge("S", "19", 1, 0),
                wg.Edge("Q", "20", 1, 0),
                wg.Edge("W", "8", 1, 0),
                wg.Edge("A", "23", 1, 0),
                wg.Edge("I", "3", 1, 0),
                wg.Edge("A", "2", 1, 0),
                wg.Edge("I", "6", 1, 0),
                wg.Edge("T", "11", 1, 0),
                wg.Edge("W", "8", 1, 0),
                wg.Edge("L", "9", 1, 0),
                wg.Edge("R", "5", 1, 0),
                wg.Edge("P", "22", 1, 0),
                wg.Edge("X", "13", 1, 0),
                wg.Edge("C", "7", 1, 0),
                wg.Edge("B", "12", 1, 0),
                wg.Edge("E", "19", 1, 0),
                wg.Edge("J", "1", 1, 0),
                wg.Edge("H", "21", 1, 0),
                wg.Edge("K", "20", 1, 0),
                wg.Edge("A", "10", 1, 0),
                wg.Edge("D", "12", 1, 0),
                wg.Edge("E", "2", 1, 0),
                wg.Edge("D", "24", 1, 0),
                wg.Edge("O", "11", 1, 0),
                wg.Edge("C", "24", 1, 0),
                wg.Edge("H", "14", 1, 0),
                wg.Edge("X", "16", 1, 0),
                wg.Edge("G", "21", 1, 0),
                wg.Edge("F", "8", 1, 0),
                wg.Edge("Z", "18", 1, 0),
                wg.Edge("V", "1", 1, 0),
                wg.Edge("U", "10", 1, 0),
                wg.Edge("B", "15", 1, 0),
                wg.Edge("N", "17", 1, 0),
                wg.Edge("M", "9", 1, 0),
                wg.Edge("Q", "2", 1, 0),
                wg.Edge("Q", "24", 1, 0),
                wg.Edge("K", "6", 1, 0),
                wg.Edge("L", "12", 1, 0),
                wg.Edge("C", "11", 1, 0),
                wg.Edge("D", "18", 1, 0),
                wg.Edge("E", "20", 1, 0),
                wg.Edge("J", "5", 1, 0),
                wg.Edge("Y", "15", 1, 0),
                wg.Edge("S", "1", 1, 0),
                wg.Edge("I", "21", 1, 0),
                wg.Edge("F", "3", 1, 0),
                wg.Edge("N", "7", 1, 0),
                wg.Edge("Z", "24", 1, 0),
                wg.Edge("T", "4", 1, 0),
                wg.Edge("H", "19", 1, 0),
                wg.Edge("A", "1", 1, 0),
                wg.Edge("P", "8", 1, 0),
                wg.Edge("G", "5", 1, 0),
                wg.Edge("X", "3", 1, 0),
                wg.Edge("R", "14", 1, 0),
                wg.Edge("B", "2", 1, 0),
                wg.Edge("U", "23", 1, 0),
                wg.Edge("W", "10", 1, 0),
                wg.Edge("L", "6", 1, 0),
                wg.Edge("O", "12", 1, 0),
                wg.Edge("J", "4", 1, 0),
                wg.Edge("Q", "7", 1, 0),
                wg.Edge("M", "23", 1, 0),
                wg.Edge("Y", "19", 1, 0),
                wg.Edge("K", "8", 1, 0),
                wg.Edge("S", "21", 1, 0),
                wg.Edge("V", "24", 1, 0),
                wg.Edge("I", "13", 1, 0),
                wg.Edge("C", "15", 1, 0),
                wg.Edge("D", "5", 1, 0),
                wg.Edge("E", "18", 1, 0),
                wg.Edge("F", "9", 1, 0),
                wg.Edge("X", "22", 1, 0),
                wg.Edge("Z", "7", 1, 0),
                wg.Edge("H", "2", 1, 0),
                wg.Edge("G", "1", 1, 0),
                wg.Edge("L", "4", 1, 0),
                wg.Edge("P", "14", 1, 0),
                wg.Edge("Y", "11", 1, 0),
                wg.Edge("R", "9", 1, 0),
                wg.Edge("N", "20", 1, 0),
                wg.Edge("M", "18", 1, 0),
                wg.Edge("T", "13", 1, 0),
                wg.Edge("Q", "15", 1, 0),
                wg.Edge("W", "6", 1, 0),
                wg.Edge("A", "21", 1, 0),
                wg.Edge("J", "25", 1, 0),
                wg.Edge("K", "11", 1, 0),
                wg.Edge("E", "16", 1, 0),
                wg.Edge("D", "8", 1, 0),
                wg.Edge("H", "3", 1, 0),
                wg.Edge("G", "4", 1, 0),
                wg.Edge("F", "20", 1, 0)]

        graph = wg.Graph(edges)
        Family = ms.Max_association(graph)
        self.assertAlmostEqual(25, Family.number_of_pairs)
